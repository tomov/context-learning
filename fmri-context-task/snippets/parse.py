# Parse the wide format .csv file generated by psychopy
# and dump it into a nicely trimmed csv file that our MATLAB scripts can understand
#
# Usage: python parse.py [input csv file] [output csv file]
# Usage: python parse.py [input csv file] [output csv file] -a
#
# The former creates a new file (or overwrites it) and adds headers for column names
# The latter appends to an existing file without adding headers
#
# Optionally -f to parse the extra fMRI-synced event onsets/offsets

import os
import sys
import csv

# make sure to update the MATLAB script format too
#
colformat = "%s %s %s %d %s" + " %s %d %d %s %s" + " %s %f %d %s %s" + " %d %d %d" + \
    " %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s"

# colnames used for the behavioral pilot
# may want to be careful adding stuff here -- will have to change things in the analyze.m script too (in ../../model)
#
colnames = [
    'participant',
    'session',
    'mriMode',
    'isPractice',
    'runFilename',

    'contextRole',
    'contextId',
    'cueId',
    'isSick',
    'corrButton',

    'response.keys',
    'response.rt',
    'response.corr',
    'restaurant',
    'food',

    'isTrain',
    'roundId',
    'trialId',

    'trialStartWallTime',
    'actualChoiceOnset',
    'actualChoiceOffset',
    'actualIsiOnset',
    'actualIsiOffset',
    'actualFeedbackOnset',
    'actualFeedbackOffset',
    'actualItiOnset',
    'actualItiOffset',
    'actualItiDuration',
    'itiDriftAdjustment',
    'trialEndWallTime',
    'stimOnset',
    'stimOffset',
    'itiDuration',
    'itiOffset'
]

assert len(colnames) == len(colformat.split(' ')), "Make sure to update colformat here and in the MATLAB script that parses the file " + str(len(colnames)) + " vs " + str(len(colformat.split(' ')))

# which columns to export from the csv
#
def parseRow(entry):
    if entry['contextId'] == '': # not a trial (e.g. instructions)
        return None
    assert entry['isTest'] == 'True' or entry['isTest'] == 'False', entry['isTest']
    isTest = entry['isTest'] == 'True'
    out = [
        entry['participant'],
        entry['session'],
        entry['mriMode'],
        int(entry['isPractice'] == 'yes'),
        entry['runFilename'],

        entry['contextRole'],
        int(entry['contextId']),
        int(entry['cueId']),
        entry['isSick'],
        entry['corrButton'],

        entry['responseKey.keys'],
        entry['responseKey.rt'],
        entry['responseKey.corr'],
        entry['restaurant'],
        entry['food'],

        int(not isTest),
        int(entry['runs.thisN']) + 1,
        (int(entry['test_trials.thisN']) + 1) if isTest else (int(entry['train_trials.thisN']) + 1),

        entry['trialStartWallTime'],
        entry['actualChoiceOnset'],
        entry['actualChoiceOffset'],
        entry['actualIsiOnset'],
        entry['actualIsiOffset'],
        entry['actualFeedbackOnset'],
        entry['actualFeedbackOffset'],
        entry['actualItiOnset'],
        entry['actualItiOffset'],
        entry['actualItiDuration'],
        entry['itiDriftAdjustment'],
        entry['trialEndWallTime'],
        entry['stimOnset'],
        entry['stimOffset'],
        entry['itiDuration'],
        entry['itiOffset']
    ]

    # TODO assert entry trialN == trial N
    # assert actual offset ~= offset
    # assert isTest & trialN

    assert len(out) == len(colnames), "Make sure to update colnames " + str(len(out)) + " vs " + str(len(colnames))
    # TODO add an assert for corrAns and sick based on context role

    return ','.join([str(x) for x in out])

if __name__  == "__main__":
    infile = sys.argv[1]
    outfile = sys.argv[2]
    append = False
    if len(sys.argv) >= 4:
        args = sys.argv[3:]
        append = '-a' in args or '--append' in args

    if append:
        desc = 'a'
    else:
        desc = 'w'
    
    with open(infile, 'r') as fin:
        reader = csv.DictReader(fin)
        with open(outfile, desc) as fout: 
            if not append: # write the headers optionally
                fout.write(','.join(colnames) + "\n")
            for row in reader:
                parsedRow = parseRow(row)
                if parsedRow:
                    fout.write(parsedRow + "\n")
