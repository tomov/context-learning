% Load the data from the .csv file generated by snippets/parse.py from the psychopy
% wide format csv's for all subjects.
% Also includes some constants and some helper functions.
%

% For behavioral pilot only -- see psychopy-2 directory
%
%format = '%s %s %s %d %s %s %s %d %d %s %s %s %f %d %s %s %d %d %d';
%[participant, session, mriMode, isPractice, restaurantsReshuffled, foodsReshuffled, contextRole, contextId, cueId, sick, corrAns, response.keys, response.rt, response.corr, restaurant, food, isTrain, roundId, trialId] = ...
%    textread('pilot.csv', format, 'delimiter', ',', 'headerlines', 1);

if ~exist('load_data_directory')
    load_data_directory = ''; % hacksauce to "pass" a directory
end

% For the real deal -- the fMRI study
%
if ~exist('fmri_data')
    fmri_data = true; % hacksauce to tell it which data file to load
end
if fmri_data
    % behavioral data from fMRI subjects
    %
    format = '%d %s %s %s %d %s %s %d %d %s %s %s %f %d %s %s %d %d %d %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s';
    [drop, participant, session, mriMode, isPractice, runFilename, ...
        contextRole, contextId, cueId, sick, corrAns, ...
        response.keys, response.rt, response.corr, restaurant, food, ...
        isTrain, roundId, trialId, ...
        trialStartWallTime, actualChoiceOnset, actualChoiceOffset, ...
        actualIsiOnset, actualIsiOffset, actualFeedbackOnset, actualFeedbackOffset, ...
        actualItiOnset, actualItiOffset, actualItiDuration, itiDriftAdjustment, ...
        trialEndWallTime, stimOnset, stimOffset, itiDuration, itiOffset] = ...
        textread(strcat(load_data_directory, 'fmri.csv'), format, 'delimiter', ',', 'headerlines', 1);
else
    % behavioral data from pilot subjects
    %
    format = '%s %s %s %d %s %s %s %d %d %s %s %s %f %d %s %s %d %d %d';

    [participant, session, mriMode, isPractice, restaurantsReshuffled, foodsReshuffled, contextRole, contextId, cueId, sick, corrAns, response.keys, response.rt, response.corr, restaurant, food, isTrain, roundId, trialId] = ...
        textread('behavioral-pilot.csv', format, 'delimiter', ',', 'headerlines', 1);
end
    
roundsPerContext = 3; % = blocks per context = runs per context = runs / 3
trialsNReps = 5; % = training trials per round / 4
trialsPerRound = 24;

% In case we're not using the GUI (i.e. analyze_gui2.m)
%
if ~exist('analyze_with_gui') || ~analyze_with_gui % for the GUI; normally we always reload the data
    which_rows = logical(true(size(participant))); % which rows to include/exclude. By default all of them. Mostly relevant for the GUI
    
    % filter out "bad" subjects
    % this applies to the fMRI data alone; for the pilot, all subjects are good
    if fmri_data
        [allSubjects, subjdirs, nRuns] = contextGetSubjectsDirsAndRuns();
        goodSubjects = allSubjects(getGoodSubjects()); % get id's of good subjects only i.e. the ones we're using in the fMRI analysis
        which_rows = which_rows & ismember(participant, goodSubjects); % only use the subjects we care about
    end
    
    subjects = unique(participant(which_rows))'; % the unique id's of all subjects we're using
    
    contextRoles = {'irrelevant', 'modulatory', 'additive'}; % should be == unique(contextRole)'

    make_optimal_choices = false;
    
    % Obtained from fit.m
    % make sure to also update analyze_gui2.m
    %
    prior_variance = 0.1249;
    inv_softmax_temp = 2.0064;
end

% b/c sometimes they're vectors of size 1 == scalars, so can't do mean([a b c d e]) 
%
get_means = @(x1c1, x1c2, x2c1, x2c2) [mean(x1c1) mean(x1c2) mean(x2c1) mean(x2c2)];
get_sems = @(x1c1, x1c2, x2c1, x2c2) [std(x1c1) / sqrt(length(x1c1)) std(x1c2) / sqrt(length(x1c2)) std(x2c1) / sqrt(length(x2c1)) std(x2c2) / sqrt(length(x2c2))];

