% Test classifier generated by classify.m
%
clear all;

model = 54; % the model with the classifier for test trials betas
EXPT = contextExpt();
is_local = 1; % 1 = Momchil's dropbox; 0 = NCF
method = 'glmnet'; % patternnet or glmnet

sss = getGoodSubjects();
%sss(sss == 5) = []; % subject 5 got reconned and the test trials on run 3 were lost :(

% which betas to get for each run -- see SPM.xX.name' in any one of the subjects model
% directories
%
betas = [];
for run = 1:9
    idx = [20:20] + (run - 1) * (20 + 6);
    betas = [betas; idx];
end

% Get the input vector and labels from the betas
% goal is to infer the targets from the inputs
% assumption is that the targets underlie the inputs
%
labels = containers.Map({'irrelevant', 'modulatory', 'additive'}, ...
                        {[1 0 0], [0 1 0], [0 0 1]});

inputs = []; % rows = x = observations, cols = voxels / dependent vars
targets = zeros(numel(sss) * numel(betas), 3); % rows = y = observations, cols = indep vars (condition as binary vector)
idx = 0;
for subj = sss
    modeldir = fullfile(EXPT.modeldir,['model',num2str(model)],['subj',num2str(subj)]);
   
    for run = 1:9
        multi = context_create_multi(1, subj, run);
        condition = multi.names{1};
        for i = betas(run,:)
            beta_vec = ccnl_get_beta(EXPT, model, i, 'striatum.nii', [subj]);
            beta_vec(isnan(beta_vec)) = 0;
            
            if numel(inputs) == 0
                inputs = zeros(numel(sss) * numel(betas), numel(beta_vec));
            end
            idx = idx + 1;
            inputs(idx,:) = beta_vec;
            targets(idx,:) = labels(condition);
        end
    end
end


if strcmp(method, 'patternnet')
    load('classfiy_patternnet_net_10-20_200.mat'); % load the neural net
    
    % patternnet wants column feature vectors. I.e. each data point is a column
    % so we have to rotate it ...
    %
    inputs = inputs'; % ugh MATLAB
    targets = targets';
    
    % Test the Network
    outputs = net(inputs);
    errors = gsubtract(targets,outputs);
    performance = perform(net,targets,outputs);

    % View the Network
    %view(net)

    % View confusion matrix
    [c,cm,ind,per] = confusion(targets,outputs);
    
    [~, i] = max(targets, [], 1);
    [~, j] = max(outputs, [], 1);
    fprintf('Success rate = %.2f%%\n', 100 * mean(i == j));
    
    % TODO these break for some reason...
    %
    A = cm';
    B = bsxfun(@rdivide,A,sum(A));
    C = imresize(1 - B, 15, 'method', 'box');
    imshow(C);
    xlabel('Targets');
    ylabel('Outputs');

elseif strcmp(method, 'glmnet')
    load('classify_glmnet_fitObj_only_1-19_vmpfc.mat'); % load the fit object
    
    outputss = glmnetPredict(fitObj, inputs, fitObj.lambda, 'response');
    
    for l = 1:size(outputss, 3) % for all lambdas
        outputs = outputss(:,:,l);
        [~, i] = max(targets, [], 2);
        [~, j] = max(outputs, [], 2);
        fprintf('Success rate for %d (lambda = %.4f) = %.2f%%\n', l, fitObj.lambda(l), 100 * mean(i == j));
    end
    
    save('classify_glmnet_outputss_1-19_vmpfc_20.mat', 'outputss');
    
else
    assert(false); % no other methods supported
end