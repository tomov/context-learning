function classify_test(method, classifier, trials, runs, sss, mask, predict_what, preload_betas)
% Test classifier generated by classify_train.m
%
% method = 'glmnet' or 'patternnet'
% classifier = object returned by classify_train

rng('shuffle');

fprintf('classify_train\n');
disp(method);

[inputs, targets] = classify_get_inputs_and_targets(trials, runs, sss, mask, predict_what, preload_betas);

outFilename = ['classify_test_', random_string()];

if strcmp(method, 'patternnet')
    net = classifier;
    
    % patternnet wants column feature vectors. I.e. each data point is a column
    % so we have to rotate it ...
    %
    inputs = inputs'; % ugh MATLAB
    targets = targets';
    
    % Test the Network
    outputs = net(inputs);
    errors = gsubtract(targets,outputs);
    performance = perform(net,targets,outputs);
    
    fprintf('SAVING outputs to %s\n', outFilename);
    save(outFilename, 'outputs', 'targets');

    % View the Network
    %view(net)

    % View confusion matrix
    [c,cm,ind,per] = confusion(targets,outputs);
    
    accuracy = classify_get_accuracy(outputs, targets);
    fprintf('Success rate = %.2f%%\n', accuracy);
    
    % TODO these break for some reason...
    %
    %{
    A = cm';
    B = bsxfun(@rdivide,A,sum(A));
    C = imresize(1 - B, 15, 'method', 'box');
    imshow(C);
    xlabel('Targets');
    ylabel('Outputs');
    %}

elseif strcmp(method, 'glmnet')
    fitObj = classifier;
    
    outputss = glmnetPredict(fitObj, inputs, fitObj.lambda, 'response');
    
    for l = 1:size(outputss, 3) % for all lambdas
        outputs = outputss(:,:,l);
        accuracy = classify_get_accuracy(outputs, targets);
        fprintf('Success rate for %d (lambda = %.4f) = %.2f%%\n', l, fitObj.lambda(l), accuracy);
    end
    
    fprintf('SAVING outputss to %s\n', outFilename);
    save(outFilename, 'outputss', 'targets');
    
else
    assert(false); % no other methods supported
end